import { MessageBehavior } from '@textshq/platform-sdk'
import { sqliteTable, integer, text, blob } from 'drizzle-orm/sqlite-core'
import type { IGAttachment, IGMessage, IGThread } from '../ig-types'

export const threads = sqliteTable('threads', {
  original: blob('_original', { mode: 'json' }).$type<IGThread>(),
  _original_parsed: text('_original_parsed'), // @TODO: debug remove
  id: text('id').primaryKey(),
  folderName: text('folderName'),
  title: text('title'),
  isUnread: integer('isUnread', { mode: 'boolean' }),
  lastReadMessageID: text('lastReadMessageID'),
  isReadOnly: integer('isReadOnly', { mode: 'boolean' }),
  isArchived: integer('isArchived', { mode: 'boolean' }),
  isPinned: integer('isPinned', { mode: 'boolean' }),
  mutedUntil: integer('mutedUntil', { mode: 'timestamp' }),
  type: text('type', { enum: ['single', 'group', 'channel', 'broadcast'] }).notNull().default('single'),
  timestamp: integer('timestamp', { mode: 'timestamp' }),
  imgURL: text('imgURL'),
  createdAt: integer('createdAt', { mode: 'timestamp' }),
  description: text('description'),
  partialLastMessage: blob('partialLastMessage'),
  messageExpirySeconds: integer('messageExpirySeconds'),
})

export const messages = sqliteTable('messages', {
  original: blob('_original', { mode: 'json' }).$type<IGMessage>(),
  _original_parsed: text('_original_parsed'), // @TODO: debug remove
  id: text('id').primaryKey(),
  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),
  editedTimestamp: integer('editedTimestamp', { mode: 'timestamp' }),
  expiresInSeconds: integer('expiresInSeconds'),
  forwardedCount: integer('forwardedCount'),
  forwardedFromText: text('forwardedFromText'),
  forwardedFromThreadID: text('forwardedFromThreadID').references(() => threads.id),
  forwardedFromUserID: integer('forwardedFromUserID'),
  senderID: text('senderID').notNull(),
  threadID: text('threadID').notNull().references(() => threads.id),
  text: text('text'),
  textAttributes: blob('textAttributes'),
  textHeading: text('textHeading'),
  textFooter: text('textFooter'),
  iframeURL: text('iframeURL'),
  seen: integer('seen', { mode: 'timestamp' }),
  isDelivered: integer('isDelivered', { mode: 'boolean' }),
  isHidden: integer('isHidden', { mode: 'boolean' }),
  isSender: integer('isSender', { mode: 'boolean' }),
  isAction: integer('isAction', { mode: 'boolean' }),
  isDeleted: integer('isDeleted', { mode: 'boolean' }),
  isErrored: integer('isErrored', { mode: 'boolean' }),
  parseTemplate: integer('parseTemplate', { mode: 'boolean' }),
  linkedMessageThreadID: text('linkedMessageThreadID'),
  linkedMessageID: text('linkedMessageID'),
  action: text('action'),
  cursor: text('cursor'),
  behavior: text('behavior', { enum: [MessageBehavior.SILENT, MessageBehavior.KEEP_READ, MessageBehavior.DONT_NOTIFY] }).default(null),
  accountID: text('accountID'),
  sortKey: text('sortKey'),
})

export const contacts = sqliteTable('contacts', {
  original: blob('_original', { mode: 'json' }).$type<Record<string, any>>(),
  id: text('id').notNull().primaryKey(),
  name: text('name'),
  username: text('username'),
  fbid: text('fbid'),
})

export const participants = sqliteTable('participants', {
  original: blob('_original', { mode: 'json' }).$type<Record<string, any>>(),
  threadID: text('threadID').notNull().references(() => threads.id),
  contactID: text('contactID').default(null).references(() => contacts.id),
  id: text('id').notNull().primaryKey(),
  name: text('name'),
  username: text('username'),
  fbid: text('fbid'),
})

export const attachments = sqliteTable('attachments', {
  _original_parsed: text('_original_parsed'), // @TODO: debug remove
  original: blob('_original', { mode: 'json' }).$type<IGAttachment>(),
  threadKey: text('threadKey').notNull().references(() => threads.id),
  messageId: text('messageId').notNull().references(() => messages.id),
  attachmentFbid: text('attachmentFbid').notNull(),
  filename: text('filename'),
  filesize: integer('filesize'),
  hasMedia: integer('hasMedia', { mode: 'boolean' }),
  playableUrl: text('playableUrl'),
  playableUrlFallback: text('playableUrlFallback'),
  playableUrlExpirationTimestampMs: integer('playableUrlExpirationTimestampMs'),
  playableUrlMimeType: text('playableUrlMimeType'),
  dashManifest: text('dashManifest'),
  previewUrl: text('previewUrl'),
  previewUrlFallback: text('previewUrlFallback'),
  previewUrlExpirationTimestampMs: integer('previewUrlExpirationTimestampMs'),
  previewUrlMimeType: text('previewUrlMimeType'),
  miniPreview: text('miniPreview'),
  previewWidth: integer('previewWidth'),
  previewHeight: integer('previewHeight'),
  attributionAppId: text('attributionAppId'),
  attributionAppName: text('attributionAppName'),
  attributionAppIcon: text('attributionAppIcon'),
  attributionAppIconFallback: text('attributionAppIconFallback'),
  attributionAppIconUrlExpirationTimestampMs: integer('attributionAppIconUrlExpirationTimestampMs'),
  localPlayableUrl: text('localPlayableUrl'),
  playableDurationMs: integer('playableDurationMs'),
  attachmentIndex: integer('attachmentIndex'),
  accessibilitySummaryText: text('accessibilitySummaryText'),
  isPreviewImage: integer('isPreviewImage', { mode: 'boolean' }),
  originalFileHash: text('originalFileHash'),
  attachmentType: integer('attachmentType'),
  timestampMs: integer('timestampMs'),
  offlineAttachmentId: text('offlineAttachmentId'),
  hasXma: integer('hasXma', { mode: 'boolean' }),
  xmaLayoutType: text('xmaLayoutType'),
  xmasTemplateType: text('xmasTemplateType'),
  titleText: text('titleText'),
  subtitleText: text('subtitleText'),
  descriptionText: text('descriptionText'),
  sourceText: text('sourceText'),
  faviconUrlExpirationTimestampMs: integer('faviconUrlExpirationTimestampMs'),
  isBorderless: integer('isBorderless', { mode: 'boolean' }),
  previewUrlLarge: text('previewUrlLarge'),
  samplingFrequencyHz: integer('samplingFrequencyHz'),
  waveformData: text('waveformData'),
  authorityLevel: integer('authorityLevel'),
})
